using Proxem.NumNet;
using Proxem.NumNet.Int32;
using Proxem.NumNet.Single;
using Proxem.Theanet;
using System;
using System.Collections.Generic;

public class DynClass: Proxem.Theanet.Runtime
{
	public static float Function(Array<float> x, int y, float lr)
	{
		if (x.Shape.Length != 3) throw new System.RankException("x");
		var Wx = FloatArray["Wx"];				// 4
		var Wh = FloatArray["Wh"];				// 4
		var bh = FloatArray["bh"];				// 2
		var W = FloatArray["W"];				// 3
		var b = FloatArray["b"];				// 2
		var h0 = FloatArray["h0"];				// 3
		var h_tm1 = h0;				// 1 = (2)
		var v1 = x.Shape[1];				// 9 = (7, 0): x.Shape[1]
		var _loop_0_0 = new Array<float>(x.Shape[0], v1, 30);				// 2 = (6, 8, 4): _loop_0_0
		var _loop_0_1 = new Array<float>(x.Shape[0], v1, 2);				// 1 = (5, 7, 6): _loop_0_1
		for (int i = 0; i < x.Shape[0]; i++)				// = (4)
		{
			var x_t = x[i];				// 1 = (3)
			var v2 = Dot(x_t, Wx, transA: false, transB: false);				// 1 = (0, 3): Dot(x_t, Wx, transA: false, transB: false)
			var v3 = Dot(h_tm1, Wh, transA: false, transB: false);				// 1 = (0, 3): Dot(h_tm1, Wh, transA: false, transB: false)
			var v4 = NN.Apply(bh, v2, v3, (_bh, _v2, _v3) => Sigmoid(_v2 + _v3 + _bh));				// 3 = (1, 0, 0): _loop_0_0
			_loop_0_0[i] = v4;				// 2 = (2)
			var v5 = Dot(v4, W, transA: false, transB: false);				// 1 = (1, 2): Dot(Sigmoid(Dot(x_t, Wx, transA: false, transB: false) + Dot(h_tm1, Wh, transA: false, transB: false) + bh), W, transA: false, transB: false)
			var v6 = NN.Apply(v5, b, (_v5, _b) => _v5 + _b);				// 1 = (0, 1): Dot(Sigmoid(Dot(x_t, Wx, transA: false, transB: false) + Dot(h_tm1, Wh, transA: false, transB: false) + bh), W, transA: false, transB: false) + b
			var v7 = Softmax(v6, axis: -1);				// 1 = (0): _loop_0_1
			_loop_0_1[i] = v7;				// 1 = (0)
			h_tm1 = v4;				// 0 = (0)
		}
		var v8 = _loop_0_1[-1, 0];				// 2 = (0): For{(x_t, h_tm1) => _loop_0_1}[-1, 0]
		var v9 = NN.Apply(v8, _v8 => Log(_v8));				// 1 = (1): Log(For{(x_t, h_tm1) => _loop_0_1}[-1, 0])
		var v10 = v9[y];				// 1 = (0): Log(For{(x_t, h_tm1) => _loop_0_1}[-1, 0])[y]
		var v11 = v10.Mean();				// 1 = (0): Log(For{(x_t, h_tm1) => _loop_0_1}[-1, 0])[y].Mean()
		var v12 = -v11;				// 1 = (0): -Log(For{(x_t, h_tm1) => _loop_0_1}[-1, 0])[y].Mean()
		// Computing value needed for Wx update.
		var v14 = Const(1f, new int[] {v1, 30});				// 1 = (0, 6, 3): Const(1f, [x.Shape[1], 30])
		var v15 = x.Shape[2];				// 5 = (2, 0): x.Shape[2]
		var v16 = Const(1f, new int[] {v1, 30});				// 1 = (0, 5, 2): Const(1f, [x.Shape[1], 30])
		var v17 = x[Slicer.Step(-1)];				// 10 = (1): x[Step(-1)]
		var v18 = Insert(_loop_0_0, 0, h0, axis: 0);				// 1 = (1, 1): Insert(For{(x_t, h_tm1) => _loop_0_0}, 0, h0, axis: 0)
		var v19 = v18[Slicer.Range(-2, -2147483648, -1)];				// 1 = (0): Insert(For{(x_t, h_tm1) => _loop_0_0}, 0, h0, axis: 0)[Range(-2, -2147483648, -1)]
		var v20 = Const(-1f, new int[] {});				// 1 = (0): Const(-1f, [])
		var v21 = OneHot(new Slice[] {y}, new int[] {2}, v20);				// 1 = (0): OneHot([y], [2], Const(-1f, []))
		var v22 = NN.Apply(v21, v8, (_v21, _v8) => _v21 / _v8);				// 1 = (0, 0): OneHot([y], [2], Const(-1f, [])) / For{(x_t, h_tm1) => _loop_0_1}[-1, 0]
		var v23 = OneHot(new Slice[] {-1, 0}, new int[] {x.Shape[0], v1, 2}, v22);				// 1 = (0): OneHot([-1, 0], [x.Shape[0], x.Shape[1], 2], OneHot([y], [2], Const(-1f, [])) / For{(x_t, h_tm1) => _loop_0_1}[-1, 0])
		var v24 = v23[Slicer.Step(-1)];				// 1 = (0): OneHot([-1, 0], [x.Shape[0], x.Shape[1], 2], OneHot([y], [2], Const(-1f, [])) / For{(x_t, h_tm1) => _loop_0_1}[-1, 0])[Step(-1)]
		var v25 = Const(0f, new int[] {v1, v15});				// 1 = (0, 4, 4): Const(0f, [x.Shape[1], x.Shape[2]])
		var dx_t_ = v25;				// 0 = (0)
		var v26 = Const(0f, new int[] {v1, 30});				// 1 = (0, 3, 1): Const(0f, [x.Shape[1], 30])
		var dh_tm1_ = v26;				// 1 = (0)
		var v27 = _loop_0_0[-1];				// 1 = (0): For{(x_t, h_tm1) => _loop_0_0}[-1]
		var h_tm1_tp1 = v27;				// 5 = (0)
		var d_loop_0_0 = new Array<float>(v17.Shape[0], v1, v15);				// 0 = (9, 2, 3): dL/dx_t
		var d_loop_0_1 = new Array<float>(v17.Shape[0], 1, 30);				// 1 = (8, 0, 0): dL/dh_tm1
		var d_loop_0_2 = new Array<float>(v17.Shape[0], v15, 30);				// 1 = (7, 2, 5): result for loop on E2 = Dot(x_t_, Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1, transA: true, transB: false) + Dot(x_t_, dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1, transA: true, transB: false)
		var d_loop_0_3 = new Array<float>(v17.Shape[0], 30, 30);				// 1 = (6, 4, 4): result for loop on E3 = Dot(h_tm1_, (Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true), transA: true, transB: false) + Dot(h_tm1_, (dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true), transA: true, transB: false)
		var d_loop_0_4 = new Array<float>(v17.Shape[0], 1, 30);				// 1 = (5, 0, 3): result for loop on E4 = (Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true) + (dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true)
		var d_loop_0_5 = new Array<float>(v17.Shape[0], 30, 2);				// 1 = (4, 3, 5): dL/dW
		var d_loop_0_6 = new Array<float>(v17.Shape[0], 1, 2);				// 1 = (3, 0, 4): dL/db
		var d_loop_0_7 = new Array<float>(v17.Shape[0], 1, 30);				// 0 = (2, 1, 2): result for loop on E7 = h_tm1_
		for (int i = 0; i < v17.Shape[0]; i++)				// = (1)
		{
			var x_t_ = v17[i];				// 2 = (0)
			var h_tm1_ = v19[i];				// 4 = (0)
			var delta_f1_ = v24[i];				// 1 = (0)
			var v28 = Dot(h_tm1_tp1, W, transA: false, transB: false);				// 0 = (4, 1): Dot(h_tm1_tp1, W, transA: false, transB: false)
			var v29 = NN.Apply(v28, b, (_v28, _b) => _v28 + _b);				// 1 = (-1, 0): Dot(h_tm1_tp1, W, transA: false, transB: false) + b
			var v30 = Softmax(v29, axis: -1);				// 2 = (0): Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)
			var v31 = NN.Apply(delta_f1_, v30, (_delta_f1_, _v30) => _delta_f1_ * _v30);				// 2 = (0, 1): delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)
			var v32 = (v31).Sum(axis: 1, keepDims: true);				// 1 = (1): (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true)
			var v33 = NN.Apply(v31, v32, v30, (_v31, _v32, _v30) => _v31 - _v30 * _v32);				// 3 = (0, 0, 0): delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true)
			var v34 = Dot(v33, W, transA: false, transB: true);				// 1 = (2, 0): Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true)
			var v35 = NN.Apply(v34, h_tm1_tp1, (_v34, _h_tm1_tp1) => _v34 * (1f - _h_tm1_tp1) * _h_tm1_tp1);				// 4 = (0, 3): Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1
			var v36 = Dot(v35, Wx, transA: false, transB: true);				// 1 = (3, 2): Dot(Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1, Wx, transA: false, transB: true)
			var v37 = v36 + NN.Zeros(new int[] {v1, v15});				// 1 = (0, 1, 1): Broadcast(Dot(Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1, Wx, transA: false, transB: true), [x.Shape[1], x.Shape[2]])
			var v38 = NN.Apply(dh_tm1_, h_tm1_tp1, (_dh_tm1_, _h_tm1_tp1) => _dh_tm1_ * (1f - _h_tm1_tp1) * _h_tm1_tp1);				// 4 = (0, 2): dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1
			var v39 = Dot(v38, Wx, transA: false, transB: true);				// 1 = (3, 1): Dot(dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1, Wx, transA: false, transB: true)
			var v40 = NN.Apply(v37, v39, (_v37, _v39) => _v37 + _v39);				// 2 = (0, 0): dL/dx_t
			d_loop_0_0[i] = v40;				// 0 = (1)
			var v41 = (v35).Sum(axis: 0, keepDims: true);				// 2 = (2): (Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true)
			var v42 = Dot(v41, Wh, transA: false, transB: true);				// 1 = (1, 2): Dot((Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true), Wh, transA: false, transB: true)
			var v43 = (v38).Sum(axis: 0, keepDims: true);				// 2 = (2): (dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true)
			var v44 = Dot(v43, Wh, transA: false, transB: true);				// 1 = (1, 1): Dot((dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true), Wh, transA: false, transB: true)
			var v45 = NN.Apply(v42, v44, (_v42, _v44) => _v42 + _v44);				// 2 = (0, 0): dL/dh_tm1
			d_loop_0_1[i] = v45;				// 1 = (1)
			var v46 = Dot(x_t_, v35, transA: true, transB: false);				// 1 = (1, 1): Dot(x_t_, Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1, transA: true, transB: false)
			var v47 = Dot(x_t_, v38, transA: true, transB: false);				// 1 = (0, 1): Dot(x_t_, dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1, transA: true, transB: false)
			var v48 = NN.Apply(v46, v47, (_v46, _v47) => _v46 + _v47);				// 1 = (0, 0): Dot(x_t_, Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1, transA: true, transB: false) + Dot(x_t_, dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1, transA: true, transB: false)
			d_loop_0_2[i] = v48;				// 1 = (0)
			var v49 = Dot(h_tm1_, v41, transA: true, transB: false);				// 1 = (3, 0): Dot(h_tm1_, (Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true), transA: true, transB: false)
			var v50 = Dot(h_tm1_, v43, transA: true, transB: false);				// 1 = (2, 0): Dot(h_tm1_, (dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true), transA: true, transB: false)
			var v51 = NN.Apply(v49, v50, (_v49, _v50) => _v49 + _v50);				// 1 = (0, 0): Dot(h_tm1_, (Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true), transA: true, transB: false) + Dot(h_tm1_, (dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true), transA: true, transB: false)
			d_loop_0_3[i] = v51;				// 1 = (0)
			var v52 = (v35).Sum(axis: 0, keepDims: true);				// 1 = (0): (Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true)
			var v53 = (v38).Sum(axis: 0, keepDims: true);				// 1 = (0): (dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true)
			var v54 = NN.Apply(v52, v53, (_v52, _v53) => _v52 + _v53);				// 1 = (0, 0): (Dot(delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) - Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1) * (delta_f1_ * Softmax(Dot(h_tm1_tp1, W, transA: false, transB: false) + b, axis: -1)).Sum(axis: 1, keepDims: true), W, transA: false, transB: true) * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true) + (dh_tm1_ * (Const(1f, [x.Shape[1], 30]) - h_tm1_tp1) * h_tm1_tp1).Sum(axis: 0, keepDims: true)
			d_loop_0_4[i] = v54;				// 1 = (0)
			var v55 = Dot(h_tm1_tp1, v33, transA: true, transB: false);				// 1 = (1, 1): dL/dW
			d_loop_0_5[i] = v55;				// 1 = (0)
			var v56 = (v33).Sum(axis: 0, keepDims: true);				// 1 = (0): dL/db
			d_loop_0_6[i] = v56;				// 1 = (0)
			d_loop_0_7[i] = h_tm1_;				// 0 = (1)
			dx_t_ = v40;				// 0 = (0)
			dh_tm1_ = v45;				// 0 = (0)
			h_tm1_tp1 = h_tm1_;				// 1 = (0)
		}
		var v57 = d_loop_0_2.Sum(axis: 0, keepDims: false);				// 1 = (0): For{(x_t_, h_tm1_, delta_f1_, dx_t_, dh_tm1_, h_tm1_tp1) => }.Sum(axis: 0, keepDims: false)
		var v58 = NN.Apply(Wx, v57, (_Wx, _v57) => _Wx - lr * _v57);				// 1 = (0, 0): Wx - Const(lr, [x.Shape[2], 30]) * For{(x_t_, h_tm1_, delta_f1_, dx_t_, dh_tm1_, h_tm1_tp1) => }.Sum(axis: 0, keepDims: false)

		// Computing value needed for Wh update.
		var v59 = d_loop_0_3.Sum(axis: 0, keepDims: false);				// 1 = (0): For{(x_t_, h_tm1_, delta_f1_, dx_t_, dh_tm1_, h_tm1_tp1) => }.Sum(axis: 0, keepDims: false)
		var v60 = NN.Apply(Wh, v59, (_Wh, _v59) => _Wh - lr * _v59);				// 1 = (0, 0): Wh - Const(lr, [30, 30]) * For{(x_t_, h_tm1_, delta_f1_, dx_t_, dh_tm1_, h_tm1_tp1) => }.Sum(axis: 0, keepDims: false)

		// Computing value needed for W update.
		var v61 = d_loop_0_5.Sum(axis: 0, keepDims: false);				// 1 = (0): For{(x_t_, h_tm1_, delta_f1_, dx_t_, dh_tm1_, h_tm1_tp1) => dL/dW}.Sum(axis: 0, keepDims: false)
		var v62 = NN.Apply(W, v61, (_W, _v61) => _W - lr * _v61);				// 1 = (-1, 0): W - Const(lr, [30, 2]) * For{(x_t_, h_tm1_, delta_f1_, dx_t_, dh_tm1_, h_tm1_tp1) => dL/dW}.Sum(axis: 0, keepDims: false)

		// Computing value needed for bh update.
		var v63 = d_loop_0_4.Sum(axis: 0, keepDims: false);				// 1 = (0): For{(x_t_, h_tm1_, delta_f1_, dx_t_, dh_tm1_, h_tm1_tp1) => }.Sum(axis: 0, keepDims: false)
		var v64 = NN.Apply(bh, v63, (_bh, _v63) => _bh - lr * _v63);				// 1 = (0, 0): bh - Const(lr, [1, 30]) * For{(x_t_, h_tm1_, delta_f1_, dx_t_, dh_tm1_, h_tm1_tp1) => }.Sum(axis: 0, keepDims: false)

		// Computing value needed for b update.
		var v65 = d_loop_0_6.Sum(axis: 0, keepDims: false);				// 1 = (0): For{(x_t_, h_tm1_, delta_f1_, dx_t_, dh_tm1_, h_tm1_tp1) => dL/db}.Sum(axis: 0, keepDims: false)
		var v66 = NN.Apply(b, v65, (_b, _v65) => _b - lr * _v65);				// 1 = (-1, 0): b - Const(lr, [1, 2]) * For{(x_t_, h_tm1_, delta_f1_, dx_t_, dh_tm1_, h_tm1_tp1) => dL/db}.Sum(axis: 0, keepDims: false)

		// Computing value needed for h0 update.
		var v67 = d_loop_0_1[-1];				// 1 = (0): For{(x_t_, h_tm1_, delta_f1_, dx_t_, dh_tm1_, h_tm1_tp1) => dL/dh_tm1}[-1]
		var v68 = NN.Apply(h0, v67, (_h0, _v67) => _h0 - lr * _v67);				// 1 = (0, 0): h0 - Const(lr, [1, 30]) * For{(x_t_, h_tm1_, delta_f1_, dx_t_, dh_tm1_, h_tm1_tp1) => dL/dh_tm1}[-1]

		// Updating Wx
		FloatArray["Wx"] = v58;

		// Updating Wh
		FloatArray["Wh"] = v60;

		// Updating W
		FloatArray["W"] = v62;

		// Updating bh
		FloatArray["bh"] = v64;

		// Updating b
		FloatArray["b"] = v66;

		// Updating h0
		FloatArray["h0"] = v68;

		return v12;
	}
}
